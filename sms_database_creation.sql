-- DSD Coursework

-- CREATE THE DATABASE & CONNECT
CREATE DATABASE dbprin_cw;
\c dbprin_cw

-- CREATE tables

-- country table
CREATE TABLE COUNTRY(
COUNTRY_ID SERIAL PRIMARY KEY,
COUNTRY_NAME VARCHAR(60) NOT NULL
);

-- role table
CREATE TABLE ROLE(
ROLE_ID SERIAL PRIMARY KEY,
ROLE_NAME VARCHAR(25) NOT NULL
);

-- Modify the cust_type to be an ENUM type
CREATE TYPE customer_type AS ENUM ('Company', 'Individual');

-- customer table 
CREATE TABLE customer(
    cust_id SERIAL PRIMARY KEY,
    cust_type customer_type NOT NULL,
    cust_fname VARCHAR(35),
    cust_lname VARCHAR(35),
    company_name VARCHAR(100),
    addr1 VARCHAR(50) NOT NULL,
    addr2 VARCHAR(50),
    city VARCHAR(60) NOT NULL,
    postcode CHAR(10),
    email VARCHAR(255) NOT NULL,
    emerg_contact VARCHAR(15) NOT NULL,
    country_id INT NOT NULL REFERENCES COUNTRY(COUNTRY_ID)
);

/*
   Ensures that conditions regarding NULL/NOT NULL values are met based on customer type.
   Prevents INSERT when all attributes are filled under specific conditions:
   - For 'Company' type, cust_fname and cust_lname must be NULL, and company_name must not be NULL.
   - For 'Individual' type, cust_fname and cust_lname must be NOT NULL, and company_name must be NULL.
*/

CREATE OR REPLACE FUNCTION check_customer_values()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.CUST_TYPE = 'Company' THEN
        IF NEW.CUST_FNAME IS NOT NULL OR NEW.CUST_LNAME IS NOT NULL OR NEW.COMPANY_NAME IS NULL THEN
            RAISE EXCEPTION 'For Company type, first name and last name must be NULL and company name must not be NULL';
        END IF;
    ELSIF NEW.CUST_TYPE = 'Individual' THEN
        IF NEW.COMPANY_NAME IS NOT NULL THEN
            RAISE EXCEPTION 'For Individual type, company name must be NULL';
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_check_customer_values ON CUSTOMER;

CREATE TRIGGER trg_check_customer_values
BEFORE INSERT OR UPDATE ON CUSTOMER
FOR EACH ROW
EXECUTE FUNCTION check_customer_values();

-- hull_design table
CREATE TABLE HULL_DESIGN(
DESIGN_ID SERIAL PRIMARY KEY,
DESIGN_NAME VARCHAR(50) NOT NULL,
HULL_WEIGHT DECIMAL(6,2)
);

-- service table 
CREATE TABLE SERVICE(
SERVICE_ID SERIAL PRIMARY KEY,
SERVICE_NAME VARCHAR(50) NOT NULL,
SERVICE_DESC VARCHAR(100) NOT NULL,
QUOTE DECIMAL(7,2) NOT NULL
);

-- yard table 
CREATE TABLE YARD(
YARD_ID SERIAL PRIMARY KEY,
YARD_NAME VARCHAR(35) NOT NULL,
ADDR VARCHAR(50) NOT NULL,
CITY VARCHAR(60) NOT NULL,
POSTCODE CHAR(10),
COUNTRY_ID INT NOT NULL REFERENCES COUNTRY(COUNTRY_ID)
);

-- facility table
CREATE TABLE FACILITY(
FACILITY_ID SERIAL PRIMARY KEY,
FACILITY_NAME VARCHAR(35) NOT NULL,
DESCRIPTION VARCHAR(290) NOT NULL
);

-- boat_type table 
CREATE TABLE BOAT_TYPE(
TYPE_ID SERIAL PRIMARY KEY,
TYPE_NAME VARCHAR(50) NOT NULL,
MODEL VARCHAR(100) NOT NULL,
MANUFACTURER VARCHAR(50) NOT NULL,
DESIGN_ID INT NOT NULL REFERENCES HULL_DESIGN(DESIGN_ID)
);

-- yard_facility table
CREATE TABLE YARD_FACILITY(
FACILITY_ID INT NOT NULL,
YARD_ID INT NOT NULL,
CONDITION_OPERATIONAL BOOLEAN NOT NULL,
PRIMARY KEY (FACILITY_ID, YARD_ID),
FOREIGN KEY (FACILITY_ID) REFERENCES FACILITY(FACILITY_ID),
FOREIGN KEY (YARD_ID) REFERENCES YARD(YARD_ID)
);

-- staff table 
CREATE TABLE STAFF(
STAFF_ID SERIAL PRIMARY KEY,
STAFF_FNAME VARCHAR(35) NOT NULL,
STAFF_LNAME VARCHAR(35) NOT NULL,
HIRE_DATE DATE NOT NULL,
SALARY DECIMAL(7,2) NOT NULL,
ADDR1 VARCHAR(50) NOT NULL,
ADDR2 VARCHAR(50),
CITY VARCHAR(60) NOT NULL,
POSTCODE CHAR(10),
PHONE_NO VARCHAR(15) NOT NULL,
HOME_EMAIL VARCHAR(255) NOT NULL,
WORK_EMAIL VARCHAR(150) NOT NULL UNIQUE,
COUNTRY_ID INT NOT NULL REFERENCES COUNTRY(COUNTRY_ID),
YARD_ID INT NOT NULL REFERENCES YARD(YARD_ID)
);

-- staff_role table 
CREATE TABLE STAFF_ROLE(
STAFF_ID INT NOT NULL,
ROLE_ID INT NOT NULL,
PRIMARY KEY (STAFF_ID, ROLE_ID),
FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ROLE_ID)
);

-- performance_spec table 
CREATE TABLE PERFORMANCE_SPEC(
SPEC_ID SERIAL PRIMARY KEY,
MAX_SPEED INT,
FUEL_EFFICIENCY DECIMAL(6,2),
PASSENGER_CAPACITY INT NOT NULL,
CARGO_CAPACITY DECIMAL(6,2),
HORSEPOWER DECIMAL(6,2),
TYPE_ID INT NOT NULL REFERENCES BOAT_TYPE(TYPE_ID)
);

-- customer boat table 
CREATE TABLE BOAT(
BOAT_ID SERIAL PRIMARY KEY,
REG_NO VARCHAR(20) NOT NULL UNIQUE,
BOAT_NAME VARCHAR(50) NOT NULL,
YEAR_BUILT INT NOT NULL,
ENGINE_TYPE VARCHAR(100),
PROPELLANT VARCHAR(9) NOT NULL,
BOAT_LENGTH DECIMAL(6,2) NOT NULL,
BOAT_BEAM DECIMAL(6,2) NOT NULL,
BOAT_DRAFT DECIMAL(6,2) NOT NULL,
TYPE_ID INT NOT NULL REFERENCES BOAT_TYPE(TYPE_ID),
CUST_ID INT NOT NULL REFERENCES CUSTOMER(CUST_ID)
);

-- insurance table 
CREATE TABLE INSURANCE(
INSURANCE_ID SERIAL PRIMARY KEY,
COMPANY_NAME VARCHAR(50) NOT NULL,
COMPANY_EMAIL VARCHAR(150) NOT NULL,
POLICY_NO VARCHAR(20) NOT NULL,
POLICY_START_DATE DATE NOT NULL,
POLICY_END_DATE DATE NOT NULL,
COVERAGE_DETAILS VARCHAR(200) NOT NULL,
BOAT_ID INT NOT NULL REFERENCES BOAT(BOAT_ID),
CHECK (POLICY_END_DATE > POLICY_START_DATE)
);

-- Modify the booking_status to be an ENUM type
CREATE TYPE bk_status AS ENUM ('Booked', 'Prebooked');

-- booking table 
CREATE TABLE BOOKING(
BOOKING_ID SERIAL PRIMARY KEY,
BOOKING_STATUS bk_status NOT NULL,
BOOKING_DATE DATE NOT NULL,
DROP_OFF_DATE DATE NOT NULL,
CUST_COLLECTION_DATE DATE NOT NULL,
BOAT_ID INT NOT NULL REFERENCES BOAT(BOAT_ID),
CHECK (DROP_OFF_DATE >= BOOKING_DATE),
CHECK (CUST_COLLECTION_DATE > DROP_OFF_DATE)
);

-- Modify the service_status to be an ENUM type
CREATE TYPE s_status AS ENUM ('Completed', 'Ongoing');

-- booking_service table 
CREATE TABLE BOOKING_SERVICE(
SERVICE_ID INT NOT NULL,
BOOKING_ID INT NOT NULL,
STAFF_ID INT NOT NULL,
YARD_ID INT NOT NULL,
COST DECIMAL(7,2) NOT NULL,
SERVICE_STATUS s_status NOT NULL,
COMPLETION_DATE DATE NOT NULL,
PRIMARY KEY (SERVICE_ID, BOOKING_ID, STAFF_ID, YARD_ID),
FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE(SERVICE_ID),
FOREIGN KEY (BOOKING_ID) REFERENCES BOOKING(BOOKING_ID),
FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
FOREIGN KEY (YARD_ID) REFERENCES YARD(YARD_ID)
);



